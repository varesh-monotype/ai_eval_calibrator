{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n// Global cache for loaded images\nconst imageCache = new Map();\nexport const useImageLoader = (src, options = {}) => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const loadImage = useCallback(() => {\n    if (!src) {\n      setLoading(false);\n      setError(true);\n      return;\n    }\n\n    // Check cache first\n    if (imageCache.has(src)) {\n      const cachedResult = imageCache.get(src);\n      setLoading(false);\n      setLoaded(cachedResult.loaded);\n      setError(cachedResult.error);\n      return;\n    }\n    const img = new Image();\n\n    // Set timeout for loading\n    const timeout = setTimeout(() => {\n      if (!img.complete) {\n        setLoading(false);\n        setError(true);\n        imageCache.set(src, {\n          loaded: false,\n          error: true\n        });\n      }\n    }, options.timeout || 3000);\n    img.onload = () => {\n      clearTimeout(timeout);\n      setLoading(false);\n      setLoaded(true);\n      setError(false);\n      imageCache.set(src, {\n        loaded: true,\n        error: false\n      });\n    };\n    img.onerror = () => {\n      clearTimeout(timeout);\n      setLoading(false);\n      setLoaded(false);\n      setError(true);\n      imageCache.set(src, {\n        loaded: false,\n        error: true\n      });\n    };\n    img.src = src;\n    img.crossOrigin = 'anonymous';\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [src, options.timeout]);\n  useEffect(() => {\n    const cleanup = loadImage();\n    return cleanup;\n  }, [loadImage]);\n  return {\n    loading,\n    error,\n    loaded\n  };\n};\n_s(useImageLoader, \"jz2s+pZ/eyMmgGWzbzMHGpV6Voc=\");","map":{"version":3,"names":["useState","useEffect","useCallback","imageCache","Map","useImageLoader","src","options","_s","loading","setLoading","error","setError","loaded","setLoaded","loadImage","has","cachedResult","get","img","Image","timeout","setTimeout","complete","set","onload","clearTimeout","onerror","crossOrigin","cleanup"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/hooks/useImageLoader.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n// Global cache for loaded images\nconst imageCache = new Map();\n\nexport const useImageLoader = (src, options = {}) => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n\n    const loadImage = useCallback(() => {\n        if (!src) {\n            setLoading(false);\n            setError(true);\n            return;\n        }\n\n        // Check cache first\n        if (imageCache.has(src)) {\n            const cachedResult = imageCache.get(src);\n            setLoading(false);\n            setLoaded(cachedResult.loaded);\n            setError(cachedResult.error);\n            return;\n        }\n\n        const img = new Image();\n\n        // Set timeout for loading\n        const timeout = setTimeout(() => {\n            if (!img.complete) {\n                setLoading(false);\n                setError(true);\n                imageCache.set(src, { loaded: false, error: true });\n            }\n        }, options.timeout || 3000);\n\n        img.onload = () => {\n            clearTimeout(timeout);\n            setLoading(false);\n            setLoaded(true);\n            setError(false);\n            imageCache.set(src, { loaded: true, error: false });\n        };\n\n        img.onerror = () => {\n            clearTimeout(timeout);\n            setLoading(false);\n            setLoaded(false);\n            setError(true);\n            imageCache.set(src, { loaded: false, error: true });\n        };\n\n        img.src = src;\n        img.crossOrigin = 'anonymous';\n\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [src, options.timeout]);\n\n    useEffect(() => {\n        const cleanup = loadImage();\n        return cleanup;\n    }, [loadImage]);\n\n    return { loading, error, loaded };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;;AAExD;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;AAE5B,OAAO,MAAMC,cAAc,GAAGA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMe,SAAS,GAAGb,WAAW,CAAC,MAAM;IAChC,IAAI,CAACI,GAAG,EAAE;MACNI,UAAU,CAAC,KAAK,CAAC;MACjBE,QAAQ,CAAC,IAAI,CAAC;MACd;IACJ;;IAEA;IACA,IAAIT,UAAU,CAACa,GAAG,CAACV,GAAG,CAAC,EAAE;MACrB,MAAMW,YAAY,GAAGd,UAAU,CAACe,GAAG,CAACZ,GAAG,CAAC;MACxCI,UAAU,CAAC,KAAK,CAAC;MACjBI,SAAS,CAACG,YAAY,CAACJ,MAAM,CAAC;MAC9BD,QAAQ,CAACK,YAAY,CAACN,KAAK,CAAC;MAC5B;IACJ;IAEA,MAAMQ,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;;IAEvB;IACA,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC7B,IAAI,CAACH,GAAG,CAACI,QAAQ,EAAE;QACfb,UAAU,CAAC,KAAK,CAAC;QACjBE,QAAQ,CAAC,IAAI,CAAC;QACdT,UAAU,CAACqB,GAAG,CAAClB,GAAG,EAAE;UAAEO,MAAM,EAAE,KAAK;UAAEF,KAAK,EAAE;QAAK,CAAC,CAAC;MACvD;IACJ,CAAC,EAAEJ,OAAO,CAACc,OAAO,IAAI,IAAI,CAAC;IAE3BF,GAAG,CAACM,MAAM,GAAG,MAAM;MACfC,YAAY,CAACL,OAAO,CAAC;MACrBX,UAAU,CAAC,KAAK,CAAC;MACjBI,SAAS,CAAC,IAAI,CAAC;MACfF,QAAQ,CAAC,KAAK,CAAC;MACfT,UAAU,CAACqB,GAAG,CAAClB,GAAG,EAAE;QAAEO,MAAM,EAAE,IAAI;QAAEF,KAAK,EAAE;MAAM,CAAC,CAAC;IACvD,CAAC;IAEDQ,GAAG,CAACQ,OAAO,GAAG,MAAM;MAChBD,YAAY,CAACL,OAAO,CAAC;MACrBX,UAAU,CAAC,KAAK,CAAC;MACjBI,SAAS,CAAC,KAAK,CAAC;MAChBF,QAAQ,CAAC,IAAI,CAAC;MACdT,UAAU,CAACqB,GAAG,CAAClB,GAAG,EAAE;QAAEO,MAAM,EAAE,KAAK;QAAEF,KAAK,EAAE;MAAK,CAAC,CAAC;IACvD,CAAC;IAEDQ,GAAG,CAACb,GAAG,GAAGA,GAAG;IACba,GAAG,CAACS,WAAW,GAAG,WAAW;IAE7B,OAAO,MAAM;MACTF,YAAY,CAACL,OAAO,CAAC;IACzB,CAAC;EACL,CAAC,EAAE,CAACf,GAAG,EAAEC,OAAO,CAACc,OAAO,CAAC,CAAC;EAE1BpB,SAAS,CAAC,MAAM;IACZ,MAAM4B,OAAO,GAAGd,SAAS,CAAC,CAAC;IAC3B,OAAOc,OAAO;EAClB,CAAC,EAAE,CAACd,SAAS,CAAC,CAAC;EAEf,OAAO;IAAEN,OAAO;IAAEE,KAAK;IAAEE;EAAO,CAAC;AACrC,CAAC;AAACL,EAAA,CA9DWH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}