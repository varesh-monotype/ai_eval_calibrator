{"ast":null,"code":"import axios from 'axios';\n\n// Use relative URL to leverage the proxy configuration\nconst API_ENDPOINT = '/fontrecommendations/typesense/stream';\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n  try {\n    var _response$data$result, _response$data$result2;\n    console.log('Making API request with query:', query);\n    const response = await axios.post(API_ENDPOINT, {\n      query: query,\n      intermediate_query_enabled: true,\n      prompt: prompt,\n      with_conversion_ranking: \"true\",\n      faiss_optimized: true\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('API Response received:', response.data);\n    console.log('Response status:', response.data.status);\n    console.log('Recommendations count:', ((_response$data$result = response.data.results) === null || _response$data$result === void 0 ? void 0 : (_response$data$result2 = _response$data$result.recommendations) === null || _response$data$result2 === void 0 ? void 0 : _response$data$result2.length) || 0);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching font recommendations:', error);\n    console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    throw error;\n  }\n};\n\n// Handle streaming Server-Sent Events (SSE) response\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n  try {\n    const response = await fetch(API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query,\n        intermediate_query_enabled: true,\n        prompt: prompt,\n        with_conversion_ranking: \"true\",\n        faiss_optimized: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n    return new Promise((resolve, reject) => {\n      const processStream = async () => {\n        try {\n          while (true) {\n            const {\n              done,\n              value\n            } = await reader.read();\n            if (done) {\n              break;\n            }\n            buffer += decoder.decode(value, {\n              stream: true\n            });\n\n            // Process complete lines from the stream\n            const lines = buffer.split('\\n');\n            buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n            for (const line of lines) {\n              if (line.trim() && line.startsWith('data: ')) {\n                try {\n                  // Extract JSON from \"data: {...}\" format\n                  const jsonStr = line.substring(6); // Remove \"data: \" prefix\n                  const data = JSON.parse(jsonStr);\n                  console.log('Stream data received:', data);\n\n                  // Call progress callback if provided\n                  if (onProgress) {\n                    onProgress(data);\n                  }\n\n                  // Check if status is complete\n                  if (data.status === 'complete') {\n                    console.log('Stream completed with data:', data);\n                    resolve(data);\n                    return;\n                  }\n                } catch (parseError) {\n                  console.warn('Failed to parse JSON from stream:', line);\n                }\n              }\n            }\n          }\n\n          // If we reach here, try to parse the final buffer\n          if (buffer.trim()) {\n            try {\n              const lines = buffer.split('\\n');\n              for (const line of lines) {\n                if (line.trim() && line.startsWith('data: ')) {\n                  const jsonStr = line.substring(6);\n                  const finalData = JSON.parse(jsonStr);\n                  if (finalData.status === 'complete') {\n                    resolve(finalData);\n                    return;\n                  }\n                }\n              }\n            } catch (parseError) {\n              reject(new Error('Failed to parse final response'));\n            }\n          }\n          reject(new Error('No complete response received'));\n        } catch (error) {\n          reject(error);\n        }\n      };\n      processStream();\n    });\n  } catch (error) {\n    console.error('Error fetching font recommendations stream:', error);\n    throw error;\n  }\n};\n\n// Save font score to database\nexport const saveFontScore = async (prompt, fontData, score) => {\n  try {\n    const scoreData = {\n      prompt: prompt,\n      font_family: fontData.family_name,\n      font_style: fontData.style_name,\n      font_md5: fontData.md5,\n      foundry: fontData.foundry_name,\n      score: score,\n      // 'good', 'average', or 'bad'\n      timestamp: new Date().toISOString(),\n      font_data: fontData,\n      // Complete font object\n      user_session: generateSessionId(),\n      // Track user session\n      ip_address: await getClientIP(),\n      // Track IP for analytics\n      user_agent: navigator.userAgent,\n      // Browser info\n      screen_resolution: `${screen.width}x${screen.height}`,\n      // Device info\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone // User timezone\n    };\n    console.log('Saving font score to database:', scoreData);\n\n    // Option 1: Save to your own backend API\n    const response = await axios.post('/api/font-scores', scoreData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Score saved successfully:', response.data);\n    return {\n      success: true,\n      data: scoreData,\n      id: response.data.id\n    };\n  } catch (error) {\n    console.error('Error saving font score:', error);\n\n    // Option 2: Fallback to localStorage if API fails\n    try {\n      const existingScores = JSON.parse(localStorage.getItem('font_scores') || '[]');\n      const newScore = {\n        id: Date.now().toString(),\n        prompt: prompt,\n        font_family: fontData.family_name,\n        font_style: fontData.style_name,\n        font_md5: fontData.md5,\n        foundry: fontData.foundry_name,\n        score: score,\n        timestamp: new Date().toISOString(),\n        font_data: fontData\n      };\n      existingScores.push(newScore);\n      localStorage.setItem('font_scores', JSON.stringify(existingScores));\n      console.log('Score saved to localStorage as fallback');\n      return {\n        success: true,\n        data: newScore,\n        fallback: true\n      };\n    } catch (localStorageError) {\n      console.error('Failed to save to localStorage:', localStorageError);\n      throw error;\n    }\n  }\n};\n\n// Get all saved scores (for analytics)\nexport const getFontScores = async () => {\n  try {\n    // Try to get from API first\n    const response = await axios.get('/api/font-scores');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching scores from API:', error);\n\n    // Fallback to localStorage\n    try {\n      const scores = JSON.parse(localStorage.getItem('font_scores') || '[]');\n      return scores;\n    } catch (localStorageError) {\n      console.error('Error reading from localStorage:', localStorageError);\n      return [];\n    }\n  }\n};\n\n// Generate unique session ID\nconst generateSessionId = () => {\n  return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n};\n\n// Get client IP (mock implementation)\nconst getClientIP = async () => {\n  try {\n    const response = await fetch('https://api.ipify.org?format=json');\n    const data = await response.json();\n    return data.ip;\n  } catch (error) {\n    console.error('Error getting IP:', error);\n    return 'unknown';\n  }\n};","map":{"version":3,"names":["axios","API_ENDPOINT","fetchFontRecommendations","query","prompt","_response$data$result","_response$data$result2","console","log","response","post","intermediate_query_enabled","with_conversion_ranking","faiss_optimized","headers","data","status","results","recommendations","length","error","_error$response","fetchFontRecommendationsStream","onProgress","fetch","method","body","JSON","stringify","ok","Error","reader","getReader","decoder","TextDecoder","buffer","Promise","resolve","reject","processStream","done","value","read","decode","stream","lines","split","pop","line","trim","startsWith","jsonStr","substring","parse","parseError","warn","finalData","saveFontScore","fontData","score","scoreData","font_family","family_name","font_style","style_name","font_md5","md5","foundry","foundry_name","timestamp","Date","toISOString","font_data","user_session","generateSessionId","ip_address","getClientIP","user_agent","navigator","userAgent","screen_resolution","screen","width","height","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","success","id","existingScores","localStorage","getItem","newScore","now","toString","push","setItem","fallback","localStorageError","getFontScores","get","scores","Math","random","substr","json","ip"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use relative URL to leverage the proxy configuration\nconst API_ENDPOINT = '/fontrecommendations/typesense/stream';\n\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n    try {\n        console.log('Making API request with query:', query);\n\n        const response = await axios.post(API_ENDPOINT, {\n            query: query,\n            intermediate_query_enabled: true,\n            prompt: prompt,\n            with_conversion_ranking: \"true\",\n            faiss_optimized: true\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        console.log('API Response received:', response.data);\n        console.log('Response status:', response.data.status);\n        console.log('Recommendations count:', response.data.results?.recommendations?.length || 0);\n\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching font recommendations:', error);\n        console.error('Error details:', error.response?.data);\n        throw error;\n    }\n};\n\n// Handle streaming Server-Sent Events (SSE) response\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n    try {\n        const response = await fetch(API_ENDPOINT, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                query: query,\n                intermediate_query_enabled: true,\n                prompt: prompt,\n                with_conversion_ranking: \"true\",\n                faiss_optimized: true\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let buffer = '';\n\n        return new Promise((resolve, reject) => {\n            const processStream = async () => {\n                try {\n                    while (true) {\n                        const { done, value } = await reader.read();\n\n                        if (done) {\n                            break;\n                        }\n\n                        buffer += decoder.decode(value, { stream: true });\n\n                        // Process complete lines from the stream\n                        const lines = buffer.split('\\n');\n                        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n                        for (const line of lines) {\n                            if (line.trim() && line.startsWith('data: ')) {\n                                try {\n                                    // Extract JSON from \"data: {...}\" format\n                                    const jsonStr = line.substring(6); // Remove \"data: \" prefix\n                                    const data = JSON.parse(jsonStr);\n\n                                    console.log('Stream data received:', data);\n\n                                    // Call progress callback if provided\n                                    if (onProgress) {\n                                        onProgress(data);\n                                    }\n\n                                    // Check if status is complete\n                                    if (data.status === 'complete') {\n                                        console.log('Stream completed with data:', data);\n                                        resolve(data);\n                                        return;\n                                    }\n                                } catch (parseError) {\n                                    console.warn('Failed to parse JSON from stream:', line);\n                                }\n                            }\n                        }\n                    }\n\n                    // If we reach here, try to parse the final buffer\n                    if (buffer.trim()) {\n                        try {\n                            const lines = buffer.split('\\n');\n                            for (const line of lines) {\n                                if (line.trim() && line.startsWith('data: ')) {\n                                    const jsonStr = line.substring(6);\n                                    const finalData = JSON.parse(jsonStr);\n                                    if (finalData.status === 'complete') {\n                                        resolve(finalData);\n                                        return;\n                                    }\n                                }\n                            }\n                        } catch (parseError) {\n                            reject(new Error('Failed to parse final response'));\n                        }\n                    }\n\n                    reject(new Error('No complete response received'));\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            processStream();\n        });\n\n    } catch (error) {\n        console.error('Error fetching font recommendations stream:', error);\n        throw error;\n    }\n};\n\n// Save font score to database\nexport const saveFontScore = async (prompt, fontData, score) => {\n    try {\n        const scoreData = {\n            prompt: prompt,\n            font_family: fontData.family_name,\n            font_style: fontData.style_name,\n            font_md5: fontData.md5,\n            foundry: fontData.foundry_name,\n            score: score, // 'good', 'average', or 'bad'\n            timestamp: new Date().toISOString(),\n            font_data: fontData, // Complete font object\n            user_session: generateSessionId(), // Track user session\n            ip_address: await getClientIP(), // Track IP for analytics\n            user_agent: navigator.userAgent, // Browser info\n            screen_resolution: `${screen.width}x${screen.height}`, // Device info\n            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone // User timezone\n        };\n\n        console.log('Saving font score to database:', scoreData);\n\n        // Option 1: Save to your own backend API\n        const response = await axios.post('/api/font-scores', scoreData, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        console.log('Score saved successfully:', response.data);\n        return { success: true, data: scoreData, id: response.data.id };\n\n    } catch (error) {\n        console.error('Error saving font score:', error);\n\n        // Option 2: Fallback to localStorage if API fails\n        try {\n            const existingScores = JSON.parse(localStorage.getItem('font_scores') || '[]');\n            const newScore = {\n                id: Date.now().toString(),\n                prompt: prompt,\n                font_family: fontData.family_name,\n                font_style: fontData.style_name,\n                font_md5: fontData.md5,\n                foundry: fontData.foundry_name,\n                score: score,\n                timestamp: new Date().toISOString(),\n                font_data: fontData\n            };\n\n            existingScores.push(newScore);\n            localStorage.setItem('font_scores', JSON.stringify(existingScores));\n\n            console.log('Score saved to localStorage as fallback');\n            return { success: true, data: newScore, fallback: true };\n        } catch (localStorageError) {\n            console.error('Failed to save to localStorage:', localStorageError);\n            throw error;\n        }\n    }\n};\n\n// Get all saved scores (for analytics)\nexport const getFontScores = async () => {\n    try {\n        // Try to get from API first\n        const response = await axios.get('/api/font-scores');\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching scores from API:', error);\n\n        // Fallback to localStorage\n        try {\n            const scores = JSON.parse(localStorage.getItem('font_scores') || '[]');\n            return scores;\n        } catch (localStorageError) {\n            console.error('Error reading from localStorage:', localStorageError);\n            return [];\n        }\n    }\n};\n\n// Generate unique session ID\nconst generateSessionId = () => {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n};\n\n// Get client IP (mock implementation)\nconst getClientIP = async () => {\n    try {\n        const response = await fetch('https://api.ipify.org?format=json');\n        const data = await response.json();\n        return data.ip;\n    } catch (error) {\n        console.error('Error getting IP:', error);\n        return 'unknown';\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}