{"ast":null,"code":"import axios from 'axios';\nimport config, { getApiUrl, getExternalUrl } from '../config';\n\n// Use config for API endpoint\nconst API_ENDPOINT = config.API.FONT_RECOMMENDATIONS;\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n  try {\n    var _response$data$result, _response$data$result2;\n    console.log('Making API request with query:', query);\n    const response = await axios.post(API_ENDPOINT, {\n      query: query,\n      intermediate_query_enabled: true,\n      prompt: prompt,\n      with_conversion_ranking: \"true\",\n      faiss_optimized: true\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000\n    });\n    console.log('API Response received:', response.data);\n    console.log('Response status:', response.data.status);\n    console.log('Recommendations count:', ((_response$data$result = response.data.results) === null || _response$data$result === void 0 ? void 0 : (_response$data$result2 = _response$data$result.recommendations) === null || _response$data$result2 === void 0 ? void 0 : _response$data$result2.length) || 0);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching font recommendations:', error);\n    console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    throw error;\n  }\n};\n\n// Handle streaming Server-Sent Events (SSE) response\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n  try {\n    const response = await fetch(API_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query,\n        intermediate_query_enabled: true,\n        prompt: prompt,\n        with_conversion_ranking: \"true\",\n        faiss_optimized: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n    return new Promise((resolve, reject) => {\n      const processStream = async () => {\n        try {\n          while (true) {\n            const {\n              done,\n              value\n            } = await reader.read();\n            if (done) {\n              break;\n            }\n            buffer += decoder.decode(value, {\n              stream: true\n            });\n\n            // Process complete lines from the stream\n            const lines = buffer.split('\\n');\n            buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n            for (const line of lines) {\n              if (line.trim() && line.startsWith('data: ')) {\n                try {\n                  // Extract JSON from \"data: {...}\" format\n                  const jsonStr = line.substring(6); // Remove \"data: \" prefix\n                  const data = JSON.parse(jsonStr);\n                  console.log('Stream data received:', data);\n\n                  // Call progress callback if provided\n                  if (onProgress) {\n                    onProgress(data);\n                  }\n\n                  // Check if status is complete\n                  if (data.status === 'complete') {\n                    console.log('Stream completed with data:', data);\n                    resolve(data);\n                    return;\n                  }\n                } catch (parseError) {\n                  console.warn('Failed to parse JSON from stream:', line);\n                }\n              }\n            }\n          }\n\n          // If we reach here, try to parse the final buffer\n          if (buffer.trim()) {\n            try {\n              const lines = buffer.split('\\n');\n              for (const line of lines) {\n                if (line.trim() && line.startsWith('data: ')) {\n                  const jsonStr = line.substring(6);\n                  const finalData = JSON.parse(jsonStr);\n                  if (finalData.status === 'complete') {\n                    resolve(finalData);\n                    return;\n                  }\n                }\n              }\n            } catch (parseError) {\n              reject(new Error('Failed to parse final response'));\n            }\n          }\n          reject(new Error('No complete response received'));\n        } catch (error) {\n          reject(error);\n        }\n      };\n      processStream();\n    });\n  } catch (error) {\n    console.error('Error fetching font recommendations stream:', error);\n    throw error;\n  }\n};\n\n// Save font score to JSON file\nexport const saveFontScore = async (prompt, fontData, score, reason = '') => {\n  try {\n    // Find the prompt ID from the prompts array\n    const prompts = await import('../data/prompts.js');\n    const promptID = prompts.prompts.indexOf(prompt) + 1; // +1 to make it 1-based\n\n    const feedbackData = {\n      promptID: promptID,\n      md5: fontData.md5 || fontData.family_name,\n      familyName: fontData.family_name,\n      score: score === 'good' ? 'Good Match' : score === 'average' ? 'Average Match' : score === 'bad' ? 'Bad Match' : score,\n      timestamp: new Date().toISOString()\n    };\n    console.log('Saving font score to JSON:', feedbackData);\n\n    // Save to server JSON file\n    const response = await axios.post('http://localhost:3001/api/feedback', {\n      promptName: prompt,\n      feedbackData: feedbackData\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000\n    });\n    console.log('Score saved successfully to JSON file');\n    return {\n      success: true,\n      data: feedbackData,\n      isNew: response.data.isNew\n    };\n  } catch (error) {\n    console.error('Error saving font score:', error);\n    throw error;\n  }\n};\n\n// Get all saved scores (for analytics)\nexport const getFontScores = async () => {\n  try {\n    // Get from server JSON file\n    const response = await axios.get('http://localhost:3001/api/feedback', {\n      timeout: 30000\n    });\n\n    // Flatten all feedback from all prompts into a single array\n    const allFeedback = [];\n    Object.values(response.data).forEach(promptFeedback => {\n      allFeedback.push(...promptFeedback);\n    });\n    return allFeedback;\n  } catch (error) {\n    console.error('Error reading feedback from JSON:', error);\n    return [];\n  }\n};\n\n// Generate unique session ID\nconst generateSessionId = () => {\n  return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n};\n\n// Get client IP (mock implementation)\nconst getClientIP = async () => {\n  if (!config.FEATURES.ANALYTICS_ENABLED) {\n    return 'analytics_disabled';\n  }\n  try {\n    const response = await fetch(getExternalUrl(config.API.IP_SERVICE));\n    const data = await response.json();\n    return data.ip;\n  } catch (error) {\n    console.error('Error getting IP:', error);\n    return 'unknown';\n  }\n};","map":{"version":3,"names":["axios","config","getApiUrl","getExternalUrl","API_ENDPOINT","API","FONT_RECOMMENDATIONS","fetchFontRecommendations","query","prompt","_response$data$result","_response$data$result2","console","log","response","post","intermediate_query_enabled","with_conversion_ranking","faiss_optimized","headers","timeout","data","status","results","recommendations","length","error","_error$response","fetchFontRecommendationsStream","onProgress","fetch","method","body","JSON","stringify","ok","Error","reader","getReader","decoder","TextDecoder","buffer","Promise","resolve","reject","processStream","done","value","read","decode","stream","lines","split","pop","line","trim","startsWith","jsonStr","substring","parse","parseError","warn","finalData","saveFontScore","fontData","score","reason","prompts","promptID","indexOf","feedbackData","md5","family_name","familyName","timestamp","Date","toISOString","promptName","success","isNew","getFontScores","get","allFeedback","Object","values","forEach","promptFeedback","push","generateSessionId","now","Math","random","toString","substr","getClientIP","FEATURES","ANALYTICS_ENABLED","IP_SERVICE","json","ip"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport config, { getApiUrl, getExternalUrl } from '../config';\n\n// Use config for API endpoint\nconst API_ENDPOINT = config.API.FONT_RECOMMENDATIONS;\n\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n    try {\n        console.log('Making API request with query:', query);\n\n        const response = await axios.post(API_ENDPOINT, {\n            query: query,\n            intermediate_query_enabled: true,\n            prompt: prompt,\n            with_conversion_ranking: \"true\",\n            faiss_optimized: true\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            timeout: 30000\n        });\n\n        console.log('API Response received:', response.data);\n        console.log('Response status:', response.data.status);\n        console.log('Recommendations count:', response.data.results?.recommendations?.length || 0);\n\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching font recommendations:', error);\n        console.error('Error details:', error.response?.data);\n        throw error;\n    }\n};\n\n// Handle streaming Server-Sent Events (SSE) response\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n    try {\n        const response = await fetch(API_ENDPOINT, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                query: query,\n                intermediate_query_enabled: true,\n                prompt: prompt,\n                with_conversion_ranking: \"true\",\n                faiss_optimized: true\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let buffer = '';\n\n        return new Promise((resolve, reject) => {\n            const processStream = async () => {\n                try {\n                    while (true) {\n                        const { done, value } = await reader.read();\n\n                        if (done) {\n                            break;\n                        }\n\n                        buffer += decoder.decode(value, { stream: true });\n\n                        // Process complete lines from the stream\n                        const lines = buffer.split('\\n');\n                        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n                        for (const line of lines) {\n                            if (line.trim() && line.startsWith('data: ')) {\n                                try {\n                                    // Extract JSON from \"data: {...}\" format\n                                    const jsonStr = line.substring(6); // Remove \"data: \" prefix\n                                    const data = JSON.parse(jsonStr);\n\n                                    console.log('Stream data received:', data);\n\n                                    // Call progress callback if provided\n                                    if (onProgress) {\n                                        onProgress(data);\n                                    }\n\n                                    // Check if status is complete\n                                    if (data.status === 'complete') {\n                                        console.log('Stream completed with data:', data);\n                                        resolve(data);\n                                        return;\n                                    }\n                                } catch (parseError) {\n                                    console.warn('Failed to parse JSON from stream:', line);\n                                }\n                            }\n                        }\n                    }\n\n                    // If we reach here, try to parse the final buffer\n                    if (buffer.trim()) {\n                        try {\n                            const lines = buffer.split('\\n');\n                            for (const line of lines) {\n                                if (line.trim() && line.startsWith('data: ')) {\n                                    const jsonStr = line.substring(6);\n                                    const finalData = JSON.parse(jsonStr);\n                                    if (finalData.status === 'complete') {\n                                        resolve(finalData);\n                                        return;\n                                    }\n                                }\n                            }\n                        } catch (parseError) {\n                            reject(new Error('Failed to parse final response'));\n                        }\n                    }\n\n                    reject(new Error('No complete response received'));\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            processStream();\n        });\n\n    } catch (error) {\n        console.error('Error fetching font recommendations stream:', error);\n        throw error;\n    }\n};\n\n// Save font score to JSON file\nexport const saveFontScore = async (prompt, fontData, score, reason = '') => {\n    try {\n        // Find the prompt ID from the prompts array\n        const prompts = await import('../data/prompts.js');\n        const promptID = prompts.prompts.indexOf(prompt) + 1; // +1 to make it 1-based\n\n        const feedbackData = {\n            promptID: promptID,\n            md5: fontData.md5 || fontData.family_name,\n            familyName: fontData.family_name,\n            score: score === 'good' ? 'Good Match' :\n                score === 'average' ? 'Average Match' :\n                    score === 'bad' ? 'Bad Match' : score,\n            timestamp: new Date().toISOString()\n        };\n\n        console.log('Saving font score to JSON:', feedbackData);\n\n        // Save to server JSON file\n        const response = await axios.post('http://localhost:3001/api/feedback', {\n            promptName: prompt,\n            feedbackData: feedbackData\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            timeout: 30000\n        });\n\n        console.log('Score saved successfully to JSON file');\n        return { success: true, data: feedbackData, isNew: response.data.isNew };\n\n    } catch (error) {\n        console.error('Error saving font score:', error);\n        throw error;\n    }\n};\n\n// Get all saved scores (for analytics)\nexport const getFontScores = async () => {\n    try {\n        // Get from server JSON file\n        const response = await axios.get('http://localhost:3001/api/feedback', {\n            timeout: 30000\n        });\n\n        // Flatten all feedback from all prompts into a single array\n        const allFeedback = [];\n        Object.values(response.data).forEach(promptFeedback => {\n            allFeedback.push(...promptFeedback);\n        });\n\n        return allFeedback;\n    } catch (error) {\n        console.error('Error reading feedback from JSON:', error);\n        return [];\n    }\n};\n\n// Generate unique session ID\nconst generateSessionId = () => {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n};\n\n// Get client IP (mock implementation)\nconst getClientIP = async () => {\n    if (!config.FEATURES.ANALYTICS_ENABLED) {\n        return 'analytics_disabled';\n    }\n\n    try {\n        const response = await fetch(getExternalUrl(config.API.IP_SERVICE));\n        const data = await response.json();\n        return data.ip;\n    } catch (error) {\n        console.error('Error getting IP:', error);\n        return 'unknown';\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}