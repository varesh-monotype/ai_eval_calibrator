{"ast":null,"code":"var _jsxFileName = \"/Users/tuliv/Documents/prompt_manual_eval/src/components/ScoreSummary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getFontScores } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScoreSummary = ({\n  scores,\n  totalResults = 0,\n  currentPrompt = '',\n  refreshTrigger = 0\n}) => {\n  _s();\n  const [allScores, setAllScores] = useState([]);\n  const [renderKey, setRenderKey] = useState(0);\n  const [lastPrompt, setLastPrompt] = useState('');\n\n  // Load existing feedback on mount and when refresh is triggered\n  useEffect(() => {\n    const loadExistingFeedback = async () => {\n      try {\n        const existingScores = await getFontScores();\n        setAllScores(existingScores);\n      } catch (error) {\n        console.error('Error loading existing feedback:', error);\n      }\n    };\n    loadExistingFeedback();\n  }, [currentPrompt, refreshTrigger]); // Re-load when prompt changes or refresh is triggered\n\n  // Force re-render when scores change\n  useEffect(() => {\n    setRenderKey(prev => prev + 1);\n  }, [scores]);\n\n  // Detect prompt changes and clear display\n  useEffect(() => {\n    if (currentPrompt !== lastPrompt) {\n      setLastPrompt(currentPrompt);\n      // Clear any cached data when switching prompts\n      setRenderKey(prev => prev + 1);\n    }\n  }, [currentPrompt, lastPrompt]);\n\n  // Helper function to normalize score format\n  const normalizeScore = score => {\n    if (typeof score === 'string') {\n      if (score === 'good' || score === 'Good Match') return 'Good Match';\n      if (score === 'average' || score === 'Average Match') return 'Average Match';\n      if (score === 'bad' || score === 'Bad Match') return 'Bad Match';\n    }\n    return score;\n  };\n\n  // Filter existing scores for current prompt only\n  const currentPromptScores = currentPrompt ? allScores.filter(score => score.promptName === currentPrompt) : [];\n\n  // Create a map of current session scores by md5 for easy lookup and updates\n  const currentSessionScoresMap = new Map();\n  scores.forEach(score => {\n    currentSessionScoresMap.set(score.font.md5, score);\n  });\n\n  // For real-time updates, use current session scores if available\n  // This ensures immediate updates when user gives feedback\n  let finalScores;\n  if (scores.length > 0) {\n    // Use current session scores for real-time updates\n    finalScores = scores;\n  } else if (refreshTrigger > 0) {\n    // After reset, use empty array\n    finalScores = [];\n  } else if (currentPrompt && currentPromptScores.length > 0) {\n    // Use existing scores from JSON for initial load (only if same prompt)\n    finalScores = currentPromptScores;\n  } else {\n    // No current session scores and no existing scores for this prompt\n    finalScores = [];\n  }\n\n  // Debug logging\n  console.log('ScoreSummary render:', {\n    scoresLength: scores.length,\n    currentPromptScoresLength: currentPromptScores.length,\n    finalScoresLength: finalScores.length,\n    currentPrompt,\n    refreshTrigger,\n    scores: scores.map(s => ({\n      font: s.font.family_name,\n      score: s.score\n    }))\n  });\n  const goodScores = finalScores.filter(s => normalizeScore(s.score) === 'Good Match').length;\n  const averageScores = finalScores.filter(s => normalizeScore(s.score) === 'Average Match').length;\n  const badScores = finalScores.filter(s => normalizeScore(s.score) === 'Bad Match').length;\n  const totalScores = finalScores.length;\n  const goodPercentage = totalScores > 0 ? Math.round(goodScores / totalScores * 100) : 0;\n  const averagePercentage = totalScores > 0 ? Math.round(averageScores / totalScores * 100) : 0;\n  const badPercentage = totalScores > 0 ? Math.round(badScores / totalScores * 100) : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg p-4 sm:p-6 shadow-sm\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3 sm:space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold text-black mb-1 sm:mb-2 text-sm sm:text-base\",\n          children: \"Overall Progress:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 text-xs sm:text-sm\",\n          children: [totalScores, \"/\", totalResults, \" results evaluated (\", totalResults > 0 ? Math.round(totalScores / totalResults * 100) : 0, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold text-black mb-2 sm:mb-3 text-sm sm:text-base\",\n          children: \"Score Distribution:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-2 sm:gap-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-green-600 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Good: \", goodPercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-orange-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Average: \", averagePercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-red-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Bad: \", badPercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n_s(ScoreSummary, \"lTCcjeZqlOwpIrBmAMtBCPnJiVU=\");\n_c = ScoreSummary;\nexport default ScoreSummary;\nvar _c;\n$RefreshReg$(_c, \"ScoreSummary\");","map":{"version":3,"names":["React","useState","useEffect","getFontScores","jsxDEV","_jsxDEV","ScoreSummary","scores","totalResults","currentPrompt","refreshTrigger","_s","allScores","setAllScores","renderKey","setRenderKey","lastPrompt","setLastPrompt","loadExistingFeedback","existingScores","error","console","prev","normalizeScore","score","currentPromptScores","filter","promptName","currentSessionScoresMap","Map","forEach","set","font","md5","finalScores","length","log","scoresLength","currentPromptScoresLength","finalScoresLength","map","s","family_name","goodScores","averageScores","badScores","totalScores","goodPercentage","Math","round","averagePercentage","badPercentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/components/ScoreSummary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getFontScores } from '../services/api';\n\nconst ScoreSummary = ({ scores, totalResults = 0, currentPrompt = '', refreshTrigger = 0 }) => {\n    const [allScores, setAllScores] = useState([]);\n    const [renderKey, setRenderKey] = useState(0);\n    const [lastPrompt, setLastPrompt] = useState('');\n\n    // Load existing feedback on mount and when refresh is triggered\n    useEffect(() => {\n        const loadExistingFeedback = async () => {\n            try {\n                const existingScores = await getFontScores();\n                setAllScores(existingScores);\n            } catch (error) {\n                console.error('Error loading existing feedback:', error);\n            }\n        };\n\n        loadExistingFeedback();\n    }, [currentPrompt, refreshTrigger]); // Re-load when prompt changes or refresh is triggered\n\n    // Force re-render when scores change\n    useEffect(() => {\n        setRenderKey(prev => prev + 1);\n    }, [scores]);\n\n    // Detect prompt changes and clear display\n    useEffect(() => {\n        if (currentPrompt !== lastPrompt) {\n            setLastPrompt(currentPrompt);\n            // Clear any cached data when switching prompts\n            setRenderKey(prev => prev + 1);\n        }\n    }, [currentPrompt, lastPrompt]);\n\n    // Helper function to normalize score format\n    const normalizeScore = (score) => {\n        if (typeof score === 'string') {\n            if (score === 'good' || score === 'Good Match') return 'Good Match';\n            if (score === 'average' || score === 'Average Match') return 'Average Match';\n            if (score === 'bad' || score === 'Bad Match') return 'Bad Match';\n        }\n        return score;\n    };\n\n    // Filter existing scores for current prompt only\n    const currentPromptScores = currentPrompt ? allScores.filter(score => score.promptName === currentPrompt) : [];\n\n    // Create a map of current session scores by md5 for easy lookup and updates\n    const currentSessionScoresMap = new Map();\n    scores.forEach(score => {\n        currentSessionScoresMap.set(score.font.md5, score);\n    });\n\n    // For real-time updates, use current session scores if available\n    // This ensures immediate updates when user gives feedback\n    let finalScores;\n\n    if (scores.length > 0) {\n        // Use current session scores for real-time updates\n        finalScores = scores;\n    } else if (refreshTrigger > 0) {\n        // After reset, use empty array\n        finalScores = [];\n    } else if (currentPrompt && currentPromptScores.length > 0) {\n        // Use existing scores from JSON for initial load (only if same prompt)\n        finalScores = currentPromptScores;\n    } else {\n        // No current session scores and no existing scores for this prompt\n        finalScores = [];\n    }\n\n    // Debug logging\n    console.log('ScoreSummary render:', {\n        scoresLength: scores.length,\n        currentPromptScoresLength: currentPromptScores.length,\n        finalScoresLength: finalScores.length,\n        currentPrompt,\n        refreshTrigger,\n        scores: scores.map(s => ({ font: s.font.family_name, score: s.score }))\n    });\n\n    const goodScores = finalScores.filter(s => normalizeScore(s.score) === 'Good Match').length;\n    const averageScores = finalScores.filter(s => normalizeScore(s.score) === 'Average Match').length;\n    const badScores = finalScores.filter(s => normalizeScore(s.score) === 'Bad Match').length;\n    const totalScores = finalScores.length;\n\n    const goodPercentage = totalScores > 0 ? Math.round((goodScores / totalScores) * 100) : 0;\n    const averagePercentage = totalScores > 0 ? Math.round((averageScores / totalScores) * 100) : 0;\n    const badPercentage = totalScores > 0 ? Math.round((badScores / totalScores) * 100) : 0;\n\n    return (\n        <div className=\"bg-white rounded-lg p-4 sm:p-6 shadow-sm\">\n            <div className=\"space-y-3 sm:space-y-4\">\n                {/* Overall Progress */}\n                <div>\n                    <h3 className=\"font-bold text-black mb-1 sm:mb-2 text-sm sm:text-base\">Overall Progress:</h3>\n                    <p className=\"text-gray-600 text-xs sm:text-sm\">{totalScores}/{totalResults} results evaluated ({totalResults > 0 ? Math.round((totalScores / totalResults) * 100) : 0}%)</p>\n                </div>\n\n                {/* Score Distribution */}\n                <div>\n                    <h3 className=\"font-bold text-black mb-2 sm:mb-3 text-sm sm:text-base\">Score Distribution:</h3>\n                    <div className=\"flex flex-wrap gap-2 sm:gap-3\">\n                        <span className=\"bg-green-600 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Good: {goodPercentage}%\n                        </span>\n                        <span className=\"bg-orange-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Average: {averagePercentage}%\n                        </span>\n                        <span className=\"bg-red-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Bad: {badPercentage}%\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScoreSummary; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}