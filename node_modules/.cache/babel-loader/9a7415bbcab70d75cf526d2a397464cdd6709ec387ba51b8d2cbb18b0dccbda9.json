{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://fontgpt-backend.monotype-pp.com';\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n      query: query,\n      intermediate_query_enabled: true,\n      prompt: prompt,\n      with_conversion_ranking: \"true\",\n      faiss_optimized: true\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching font recommendations:', error);\n    throw error;\n  }\n};\n\n// Alternative implementation for true streaming (if the API supports SSE)\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query,\n        intermediate_query_enabled: true,\n        prompt: prompt,\n        with_conversion_ranking: \"true\",\n        faiss_optimized: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // For now, let's try to get the response as JSON directly\n    const data = await response.json();\n\n    // Call progress callback if provided\n    if (onProgress) {\n      onProgress(data);\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching font recommendations stream:', error);\n    throw error;\n  }\n};\n\n// Mock function for storing scores in database\nexport const saveFontScore = async (prompt, fontData, score) => {\n  try {\n    // This would be replaced with actual database call\n    const scoreData = {\n      prompt: prompt,\n      font_family: fontData.family_name,\n      font_style: fontData.style_name,\n      font_md5: fontData.md5,\n      foundry: fontData.foundry_name,\n      score: score,\n      timestamp: new Date().toISOString(),\n      font_data: fontData\n    };\n    console.log('Saving font score:', scoreData);\n\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      success: true,\n      data: scoreData\n    };\n  } catch (error) {\n    console.error('Error saving font score:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchFontRecommendations","query","prompt","response","post","intermediate_query_enabled","with_conversion_ranking","faiss_optimized","headers","data","error","console","fetchFontRecommendationsStream","onProgress","fetch","method","body","JSON","stringify","ok","Error","status","json","saveFontScore","fontData","score","scoreData","font_family","family_name","font_style","style_name","font_md5","md5","foundry","foundry_name","timestamp","Date","toISOString","font_data","log","Promise","resolve","setTimeout","success"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://fontgpt-backend.monotype-pp.com';\n\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n    try {\n        const response = await axios.post(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n            query: query,\n            intermediate_query_enabled: true,\n            prompt: prompt,\n            with_conversion_ranking: \"true\",\n            faiss_optimized: true\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching font recommendations:', error);\n        throw error;\n    }\n};\n\n// Alternative implementation for true streaming (if the API supports SSE)\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                query: query,\n                intermediate_query_enabled: true,\n                prompt: prompt,\n                with_conversion_ranking: \"true\",\n                faiss_optimized: true\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        // For now, let's try to get the response as JSON directly\n        const data = await response.json();\n\n        // Call progress callback if provided\n        if (onProgress) {\n            onProgress(data);\n        }\n\n        return data;\n\n    } catch (error) {\n        console.error('Error fetching font recommendations stream:', error);\n        throw error;\n    }\n};\n\n// Mock function for storing scores in database\nexport const saveFontScore = async (prompt, fontData, score) => {\n    try {\n        // This would be replaced with actual database call\n        const scoreData = {\n            prompt: prompt,\n            font_family: fontData.family_name,\n            font_style: fontData.style_name,\n            font_md5: fontData.md5,\n            foundry: fontData.foundry_name,\n            score: score,\n            timestamp: new Date().toISOString(),\n            font_data: fontData\n        };\n\n        console.log('Saving font score:', scoreData);\n\n        // Simulate API call delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        return { success: true, data: scoreData };\n    } catch (error) {\n        console.error('Error saving font score:', error);\n        throw error;\n    }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,yCAAyC;AAE9D,OAAO,MAAMC,wBAAwB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,MAAM,GAAG,EAAE,KAAK;EAClE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,uCAAuC,EAAE;MACtFE,KAAK,EAAEA,KAAK;MACZI,0BAA0B,EAAE,IAAI;MAChCH,MAAM,EAAEA,MAAM;MACdI,uBAAuB,EAAE,MAAM;MAC/BC,eAAe,EAAE;IACrB,CAAC,EAAE;MACCC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,OAAOL,QAAQ,CAACM,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,8BAA8B,GAAG,MAAAA,CAAOX,KAAK,EAAEC,MAAM,GAAG,EAAE,EAAEW,UAAU,KAAK;EACpF,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGf,YAAY,uCAAuC,EAAE;MACjFgB,MAAM,EAAE,MAAM;MACdP,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBjB,KAAK,EAAEA,KAAK;QACZI,0BAA0B,EAAE,IAAI;QAChCH,MAAM,EAAEA,MAAM;QACdI,uBAAuB,EAAE,MAAM;QAC/BC,eAAe,EAAE;MACrB,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACgB,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBjB,QAAQ,CAACkB,MAAM,EAAE,CAAC;IAC7D;;IAEA;IACA,MAAMZ,IAAI,GAAG,MAAMN,QAAQ,CAACmB,IAAI,CAAC,CAAC;;IAElC;IACA,IAAIT,UAAU,EAAE;MACZA,UAAU,CAACJ,IAAI,CAAC;IACpB;IAEA,OAAOA,IAAI;EAEf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,aAAa,GAAG,MAAAA,CAAOrB,MAAM,EAAEsB,QAAQ,EAAEC,KAAK,KAAK;EAC5D,IAAI;IACA;IACA,MAAMC,SAAS,GAAG;MACdxB,MAAM,EAAEA,MAAM;MACdyB,WAAW,EAAEH,QAAQ,CAACI,WAAW;MACjCC,UAAU,EAAEL,QAAQ,CAACM,UAAU;MAC/BC,QAAQ,EAAEP,QAAQ,CAACQ,GAAG;MACtBC,OAAO,EAAET,QAAQ,CAACU,YAAY;MAC9BT,KAAK,EAAEA,KAAK;MACZU,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,SAAS,EAAEd;IACf,CAAC;IAEDb,OAAO,CAAC4B,GAAG,CAAC,oBAAoB,EAAEb,SAAS,CAAC;;IAE5C;IACA,MAAM,IAAIc,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IAEtD,OAAO;MAAEE,OAAO,EAAE,IAAI;MAAElC,IAAI,EAAEiB;IAAU,CAAC;EAC7C,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}