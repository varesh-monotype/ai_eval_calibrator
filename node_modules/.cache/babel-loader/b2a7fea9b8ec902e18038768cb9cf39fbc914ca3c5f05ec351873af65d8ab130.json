{"ast":null,"code":"var _jsxFileName = \"/Users/tuliv/Documents/prompt_manual_eval/src/components/ScoreSummary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getFontScores } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScoreSummary = ({\n  scores,\n  totalResults = 0,\n  currentPrompt = '',\n  refreshTrigger = 0\n}) => {\n  _s();\n  const [allScores, setAllScores] = useState([]);\n  const [renderKey, setRenderKey] = useState(0);\n  const [lastPrompt, setLastPrompt] = useState('');\n\n  // Load existing feedback on mount and when refresh is triggered\n  useEffect(() => {\n    const loadExistingFeedback = async () => {\n      try {\n        const existingScores = await getFontScores();\n        setAllScores(existingScores);\n      } catch (error) {\n        console.error('Error loading existing feedback:', error);\n      }\n    };\n    loadExistingFeedback();\n  }, [currentPrompt, refreshTrigger]); // Re-load when prompt changes or refresh is triggered\n\n  // Reset lastPrompt when currentPrompt changes to ensure proper state management\n  useEffect(() => {\n    if (currentPrompt !== lastPrompt) {\n      setLastPrompt(currentPrompt);\n    }\n  }, [currentPrompt, lastPrompt]);\n\n  // Force re-render when scores change\n  useEffect(() => {\n    setRenderKey(prev => prev + 1);\n  }, [scores]);\n\n  // Detect prompt changes and clear display\n  useEffect(() => {\n    if (currentPrompt !== lastPrompt) {\n      setLastPrompt(currentPrompt);\n      // Clear any cached data when switching prompts\n      setRenderKey(prev => prev + 1);\n    }\n  }, [currentPrompt, lastPrompt]);\n\n  // Helper function to normalize score format\n  const normalizeScore = score => {\n    if (typeof score === 'string') {\n      if (score === 'good' || score === 'Good Match') return 'Good Match';\n      if (score === 'average' || score === 'Average Match') return 'Average Match';\n      if (score === 'bad' || score === 'Bad Match') return 'Bad Match';\n    }\n    return score;\n  };\n\n  // Filter existing scores for current prompt only\n  const currentPromptScores = currentPrompt ? allScores.filter(score => score.promptName === currentPrompt) : [];\n\n  // Create a map of current session scores by md5 for easy lookup and updates\n  const currentSessionScoresMap = new Map();\n  scores.forEach(score => {\n    currentSessionScoresMap.set(score.font.md5, score);\n  });\n\n  // Combine existing feedback with current session scores\n  let finalScores = [];\n\n  // Start with existing feedback for the current prompt\n  if (currentPrompt && currentPromptScores.length > 0) {\n    finalScores = [...currentPromptScores];\n  }\n\n  // Merge with current session scores (prioritize session scores for real-time updates)\n  if (scores.length > 0) {\n    const sessionScoresMap = new Map();\n    scores.forEach(score => {\n      sessionScoresMap.set(score.font.md5, score);\n    });\n\n    // Update finalScores with session scores (replace existing entries)\n    finalScores = finalScores.map(existingScore => {\n      const sessionScore = sessionScoresMap.get(existingScore.md5);\n      return sessionScore || existingScore;\n    });\n\n    // Add any new session scores that don't exist in finalScores\n    scores.forEach(sessionScore => {\n      const exists = finalScores.some(existing => existing.md5 === sessionScore.font.md5);\n      if (!exists) {\n        finalScores.push({\n          promptID: sessionScore.font.promptID,\n          promptName: currentPrompt,\n          md5: sessionScore.font.md5,\n          familyName: sessionScore.font.family_name,\n          score: sessionScore.score,\n          reason: sessionScore.reason || '',\n          email: sessionScore.email || '',\n          timestamp: sessionScore.timestamp\n        });\n      }\n    });\n  }\n\n  // If refresh trigger is active, clear the scores (reset operation)\n  if (refreshTrigger > 0 && scores.length === 0) {\n    finalScores = [];\n  }\n\n  // Debug logging\n  console.log('ScoreSummary render:', {\n    scoresLength: scores.length,\n    currentPromptScoresLength: currentPromptScores.length,\n    finalScoresLength: finalScores.length,\n    currentPrompt,\n    refreshTrigger,\n    existingScores: currentPromptScores.map(s => ({\n      font: s.familyName,\n      score: s.score\n    })),\n    sessionScores: scores.map(s => ({\n      font: s.font.family_name,\n      score: s.score\n    }))\n  });\n  const goodScores = finalScores.filter(s => normalizeScore(s.score) === 'Good Match').length;\n  const averageScores = finalScores.filter(s => normalizeScore(s.score) === 'Average Match').length;\n  const badScores = finalScores.filter(s => normalizeScore(s.score) === 'Bad Match').length;\n  const totalScores = finalScores.length;\n  const goodPercentage = totalScores > 0 ? Math.round(goodScores / totalScores * 100) : 0;\n  const averagePercentage = totalScores > 0 ? Math.round(averageScores / totalScores * 100) : 0;\n  const badPercentage = totalScores > 0 ? Math.round(badScores / totalScores * 100) : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg p-4 sm:p-6 shadow-sm\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3 sm:space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold text-black mb-1 sm:mb-2 text-sm sm:text-base\",\n          children: \"Overall Progress:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 text-xs sm:text-sm\",\n          children: [totalScores, \"/\", totalResults, \" results evaluated (\", totalResults > 0 ? Math.round(totalScores / totalResults * 100) : 0, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold text-black mb-2 sm:mb-3 text-sm sm:text-base\",\n          children: \"Score Distribution:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-2 sm:gap-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-green-600 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Good: \", goodPercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-orange-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Average: \", averagePercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-red-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Bad: \", badPercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n_s(ScoreSummary, \"bbaWoEePV6T9w+Lbrjd1WrP9Ses=\");\n_c = ScoreSummary;\nexport default ScoreSummary;\nvar _c;\n$RefreshReg$(_c, \"ScoreSummary\");","map":{"version":3,"names":["React","useState","useEffect","getFontScores","jsxDEV","_jsxDEV","ScoreSummary","scores","totalResults","currentPrompt","refreshTrigger","_s","allScores","setAllScores","renderKey","setRenderKey","lastPrompt","setLastPrompt","loadExistingFeedback","existingScores","error","console","prev","normalizeScore","score","currentPromptScores","filter","promptName","currentSessionScoresMap","Map","forEach","set","font","md5","finalScores","length","sessionScoresMap","map","existingScore","sessionScore","get","exists","some","existing","push","promptID","familyName","family_name","reason","email","timestamp","log","scoresLength","currentPromptScoresLength","finalScoresLength","s","sessionScores","goodScores","averageScores","badScores","totalScores","goodPercentage","Math","round","averagePercentage","badPercentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/components/ScoreSummary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getFontScores } from '../services/api';\n\nconst ScoreSummary = ({ scores, totalResults = 0, currentPrompt = '', refreshTrigger = 0 }) => {\n    const [allScores, setAllScores] = useState([]);\n    const [renderKey, setRenderKey] = useState(0);\n    const [lastPrompt, setLastPrompt] = useState('');\n\n    // Load existing feedback on mount and when refresh is triggered\n    useEffect(() => {\n        const loadExistingFeedback = async () => {\n            try {\n                const existingScores = await getFontScores();\n                setAllScores(existingScores);\n            } catch (error) {\n                console.error('Error loading existing feedback:', error);\n            }\n        };\n\n        loadExistingFeedback();\n    }, [currentPrompt, refreshTrigger]); // Re-load when prompt changes or refresh is triggered\n\n    // Reset lastPrompt when currentPrompt changes to ensure proper state management\n    useEffect(() => {\n        if (currentPrompt !== lastPrompt) {\n            setLastPrompt(currentPrompt);\n        }\n    }, [currentPrompt, lastPrompt]);\n\n    // Force re-render when scores change\n    useEffect(() => {\n        setRenderKey(prev => prev + 1);\n    }, [scores]);\n\n    // Detect prompt changes and clear display\n    useEffect(() => {\n        if (currentPrompt !== lastPrompt) {\n            setLastPrompt(currentPrompt);\n            // Clear any cached data when switching prompts\n            setRenderKey(prev => prev + 1);\n        }\n    }, [currentPrompt, lastPrompt]);\n\n    // Helper function to normalize score format\n    const normalizeScore = (score) => {\n        if (typeof score === 'string') {\n            if (score === 'good' || score === 'Good Match') return 'Good Match';\n            if (score === 'average' || score === 'Average Match') return 'Average Match';\n            if (score === 'bad' || score === 'Bad Match') return 'Bad Match';\n        }\n        return score;\n    };\n\n    // Filter existing scores for current prompt only\n    const currentPromptScores = currentPrompt ? allScores.filter(score => score.promptName === currentPrompt) : [];\n\n    // Create a map of current session scores by md5 for easy lookup and updates\n    const currentSessionScoresMap = new Map();\n    scores.forEach(score => {\n        currentSessionScoresMap.set(score.font.md5, score);\n    });\n\n    // Combine existing feedback with current session scores\n    let finalScores = [];\n\n    // Start with existing feedback for the current prompt\n    if (currentPrompt && currentPromptScores.length > 0) {\n        finalScores = [...currentPromptScores];\n    }\n\n    // Merge with current session scores (prioritize session scores for real-time updates)\n    if (scores.length > 0) {\n        const sessionScoresMap = new Map();\n        scores.forEach(score => {\n            sessionScoresMap.set(score.font.md5, score);\n        });\n\n        // Update finalScores with session scores (replace existing entries)\n        finalScores = finalScores.map(existingScore => {\n            const sessionScore = sessionScoresMap.get(existingScore.md5);\n            return sessionScore || existingScore;\n        });\n\n        // Add any new session scores that don't exist in finalScores\n        scores.forEach(sessionScore => {\n            const exists = finalScores.some(existing => existing.md5 === sessionScore.font.md5);\n            if (!exists) {\n                finalScores.push({\n                    promptID: sessionScore.font.promptID,\n                    promptName: currentPrompt,\n                    md5: sessionScore.font.md5,\n                    familyName: sessionScore.font.family_name,\n                    score: sessionScore.score,\n                    reason: sessionScore.reason || '',\n                    email: sessionScore.email || '',\n                    timestamp: sessionScore.timestamp\n                });\n            }\n        });\n    }\n\n    // If refresh trigger is active, clear the scores (reset operation)\n    if (refreshTrigger > 0 && scores.length === 0) {\n        finalScores = [];\n    }\n\n    // Debug logging\n    console.log('ScoreSummary render:', {\n        scoresLength: scores.length,\n        currentPromptScoresLength: currentPromptScores.length,\n        finalScoresLength: finalScores.length,\n        currentPrompt,\n        refreshTrigger,\n        existingScores: currentPromptScores.map(s => ({ font: s.familyName, score: s.score })),\n        sessionScores: scores.map(s => ({ font: s.font.family_name, score: s.score }))\n    });\n\n    const goodScores = finalScores.filter(s => normalizeScore(s.score) === 'Good Match').length;\n    const averageScores = finalScores.filter(s => normalizeScore(s.score) === 'Average Match').length;\n    const badScores = finalScores.filter(s => normalizeScore(s.score) === 'Bad Match').length;\n    const totalScores = finalScores.length;\n\n    const goodPercentage = totalScores > 0 ? Math.round((goodScores / totalScores) * 100) : 0;\n    const averagePercentage = totalScores > 0 ? Math.round((averageScores / totalScores) * 100) : 0;\n    const badPercentage = totalScores > 0 ? Math.round((badScores / totalScores) * 100) : 0;\n\n    return (\n        <div className=\"bg-white rounded-lg p-4 sm:p-6 shadow-sm\">\n            <div className=\"space-y-3 sm:space-y-4\">\n                {/* Overall Progress */}\n                <div>\n                    <h3 className=\"font-bold text-black mb-1 sm:mb-2 text-sm sm:text-base\">Overall Progress:</h3>\n                    <p className=\"text-gray-600 text-xs sm:text-sm\">{totalScores}/{totalResults} results evaluated ({totalResults > 0 ? Math.round((totalScores / totalResults) * 100) : 0}%)</p>\n                </div>\n\n                {/* Score Distribution */}\n                <div>\n                    <h3 className=\"font-bold text-black mb-2 sm:mb-3 text-sm sm:text-base\">Score Distribution:</h3>\n                    <div className=\"flex flex-wrap gap-2 sm:gap-3\">\n                        <span className=\"bg-green-600 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Good: {goodPercentage}%\n                        </span>\n                        <span className=\"bg-orange-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Average: {averagePercentage}%\n                        </span>\n                        <span className=\"bg-red-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Bad: {badPercentage}%\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScoreSummary; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}