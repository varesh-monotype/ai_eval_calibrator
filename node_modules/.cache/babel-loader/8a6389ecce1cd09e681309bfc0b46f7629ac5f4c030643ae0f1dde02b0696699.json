{"ast":null,"code":"var _jsxFileName = \"/Users/tuliv/Documents/prompt_manual_eval/src/components/PromptGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { RotateCcw } from 'lucide-react';\nimport { prompts } from '../data/prompts';\nimport { resetPromptFeedback } from '../services/api';\nimport CustomModal from './CustomModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PromptGrid = ({\n  onPromptClick,\n  selectedPrompt,\n  onResetSuccess\n}) => {\n  _s();\n  const [modalState, setModalState] = useState({\n    isOpen: false,\n    type: 'info',\n    title: '',\n    message: '',\n    onConfirm: null\n  });\n  const showModal = (type, title, message, onConfirm) => {\n    setModalState({\n      isOpen: true,\n      type,\n      title,\n      message,\n      onConfirm\n    });\n  };\n  const closeModal = () => {\n    setModalState({\n      isOpen: false,\n      type: 'info',\n      title: '',\n      message: '',\n      onConfirm: null\n    });\n  };\n  const handleReset = async (e, prompt) => {\n    e.stopPropagation(); // Prevent triggering the prompt click\n\n    showModal('confirm', 'Reset Feedback Data', `Are you sure you want to reset all feedback data for \"${prompt}\"? This action cannot be undone.`, async () => {\n      try {\n        await resetPromptFeedback(prompt);\n        showModal('success', 'Reset Successful', `Feedback data cleared for \"${prompt}\". You can now add fresh feedback.`, () => {\n          if (onResetSuccess) {\n            onResetSuccess(prompt);\n          }\n        });\n      } catch (error) {\n        console.error('Error resetting feedback:', error);\n        showModal('warning', 'Reset Failed', 'Failed to reset feedback data. Please try again.', null);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-2\",\n      children: prompts.map((prompt, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `w-full p-3 sm:p-4 rounded-xl transition-all duration-200 ${selectedPrompt === prompt ? 'bg-blue-50 border-2 border-blue-200 shadow-sm' : 'bg-white hover:bg-gray-50 border border-gray-200'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-start justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-1 min-w-0\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => onPromptClick(prompt),\n              className: \"w-full text-left\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: `font-medium text-xs sm:text-sm mb-1 ${selectedPrompt === prompt ? 'text-blue-700' : 'text-gray-900'} truncate`,\n                children: prompt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-500 text-xs\",\n                children: \"Click to analyze fonts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ml-2 sm:ml-3 flex-shrink-0 flex items-center space-x-2\",\n            children: [selectedPrompt === prompt && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleReset(e, prompt),\n              className: \"p-1 rounded-lg hover:bg-gray-200 transition-colors text-gray-500 hover:text-red-600\",\n              title: \"Reset feedback data for this prompt\",\n              children: /*#__PURE__*/_jsxDEV(RotateCcw, {\n                size: 14\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CustomModal, {\n      isOpen: modalState.isOpen,\n      onClose: closeModal,\n      title: modalState.title,\n      message: modalState.message,\n      type: modalState.type,\n      onConfirm: modalState.onConfirm,\n      confirmText: modalState.type === 'confirm' ? 'Reset' : 'OK',\n      showCancel: modalState.type === 'confirm',\n      cancelText: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(PromptGrid, \"g+cUPP8nNYaMnbtHcOL++vqVoLk=\");\n_c = PromptGrid;\nexport default PromptGrid;\nvar _c;\n$RefreshReg$(_c, \"PromptGrid\");","map":{"version":3,"names":["React","useState","RotateCcw","prompts","resetPromptFeedback","CustomModal","jsxDEV","_jsxDEV","Fragment","_Fragment","PromptGrid","onPromptClick","selectedPrompt","onResetSuccess","_s","modalState","setModalState","isOpen","type","title","message","onConfirm","showModal","closeModal","handleReset","e","prompt","stopPropagation","error","console","children","className","map","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","size","onClose","confirmText","showCancel","cancelText","_c","$RefreshReg$"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/components/PromptGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { RotateCcw } from 'lucide-react';\nimport { prompts } from '../data/prompts';\nimport { resetPromptFeedback } from '../services/api';\nimport CustomModal from './CustomModal';\n\nconst PromptGrid = ({ onPromptClick, selectedPrompt, onResetSuccess }) => {\n    const [modalState, setModalState] = useState({\n        isOpen: false,\n        type: 'info',\n        title: '',\n        message: '',\n        onConfirm: null\n    });\n\n    const showModal = (type, title, message, onConfirm) => {\n        setModalState({\n            isOpen: true,\n            type,\n            title,\n            message,\n            onConfirm\n        });\n    };\n\n    const closeModal = () => {\n        setModalState({\n            isOpen: false,\n            type: 'info',\n            title: '',\n            message: '',\n            onConfirm: null\n        });\n    };\n\n    const handleReset = async (e, prompt) => {\n        e.stopPropagation(); // Prevent triggering the prompt click\n\n        showModal(\n            'confirm',\n            'Reset Feedback Data',\n            `Are you sure you want to reset all feedback data for \"${prompt}\"? This action cannot be undone.`,\n            async () => {\n                try {\n                    await resetPromptFeedback(prompt);\n                    showModal(\n                        'success',\n                        'Reset Successful',\n                        `Feedback data cleared for \"${prompt}\". You can now add fresh feedback.`,\n                        () => {\n                            if (onResetSuccess) {\n                                onResetSuccess(prompt);\n                            }\n                        }\n                    );\n                } catch (error) {\n                    console.error('Error resetting feedback:', error);\n                    showModal(\n                        'warning',\n                        'Reset Failed',\n                        'Failed to reset feedback data. Please try again.',\n                        null\n                    );\n                }\n            }\n        );\n    };\n\n    return (\n        <>\n            <div className=\"space-y-2\">\n                {prompts.map((prompt, index) => (\n                    <div\n                        key={index}\n                        className={`w-full p-3 sm:p-4 rounded-xl transition-all duration-200 ${selectedPrompt === prompt\n                            ? 'bg-blue-50 border-2 border-blue-200 shadow-sm'\n                            : 'bg-white hover:bg-gray-50 border border-gray-200'\n                            }`}\n                    >\n                        <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1 min-w-0\">\n                                <button\n                                    onClick={() => onPromptClick(prompt)}\n                                    className=\"w-full text-left\"\n                                >\n                                    <h3 className={`font-medium text-xs sm:text-sm mb-1 ${selectedPrompt === prompt ? 'text-blue-700' : 'text-gray-900'\n                                        } truncate`}>\n                                        {prompt}\n                                    </h3>\n                                    <p className=\"text-gray-500 text-xs\">\n                                        Click to analyze fonts\n                                    </p>\n                                </button>\n                            </div>\n\n                            <div className=\"ml-2 sm:ml-3 flex-shrink-0 flex items-center space-x-2\">\n                                {selectedPrompt === prompt && (\n                                    <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n                                )}\n                                <button\n                                    onClick={(e) => handleReset(e, prompt)}\n                                    className=\"p-1 rounded-lg hover:bg-gray-200 transition-colors text-gray-500 hover:text-red-600\"\n                                    title=\"Reset feedback data for this prompt\"\n                                >\n                                    <RotateCcw size={14} />\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            <CustomModal\n                isOpen={modalState.isOpen}\n                onClose={closeModal}\n                title={modalState.title}\n                message={modalState.message}\n                type={modalState.type}\n                onConfirm={modalState.onConfirm}\n                confirmText={modalState.type === 'confirm' ? 'Reset' : 'OK'}\n                showCancel={modalState.type === 'confirm'}\n                cancelText=\"Cancel\"\n            />\n        </>\n    );\n};\n\nexport default PromptGrid; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}