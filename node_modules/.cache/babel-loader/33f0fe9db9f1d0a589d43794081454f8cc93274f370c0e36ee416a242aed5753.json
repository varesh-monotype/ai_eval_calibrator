{"ast":null,"code":"var _jsxFileName = \"/Users/tuliv/Documents/prompt_manual_eval/src/components/ScoreSummary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getFontScores } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScoreSummary = ({\n  scores,\n  totalResults = 0,\n  currentPrompt = '',\n  refreshTrigger = 0\n}) => {\n  _s();\n  const [allScores, setAllScores] = useState([]);\n\n  // Load existing feedback on mount and when scores change\n  useEffect(() => {\n    const loadExistingFeedback = async () => {\n      try {\n        const existingScores = await getFontScores();\n        setAllScores(existingScores);\n      } catch (error) {\n        console.error('Error loading existing feedback:', error);\n      }\n    };\n    loadExistingFeedback();\n  }, [currentPrompt, scores.length, refreshTrigger]); // Re-load when prompt changes, new scores are added, or refresh is triggered\n\n  // Filter existing scores for current prompt only\n  const currentPromptScores = currentPrompt ? allScores.filter(score => score.promptName === currentPrompt) : [];\n\n  // Get unique scores by md5 to avoid double counting\n  const existingMd5s = new Set(currentPromptScores.map(score => score.md5));\n  const newScoresOnly = scores.filter(score => !existingMd5s.has(score.font.md5));\n\n  // Combine existing scores with new scores (avoiding duplicates)\n  const combinedScores = [...currentPromptScores, ...newScoresOnly];\n  const goodScores = combinedScores.filter(s => s.score === 'Good Match').length;\n  const averageScores = combinedScores.filter(s => s.score === 'Average Match').length;\n  const badScores = combinedScores.filter(s => s.score === 'Bad Match').length;\n  const totalScores = combinedScores.length;\n  const goodPercentage = totalScores > 0 ? Math.round(goodScores / totalScores * 100) : 0;\n  const averagePercentage = totalScores > 0 ? Math.round(averageScores / totalScores * 100) : 0;\n  const badPercentage = totalScores > 0 ? Math.round(badScores / totalScores * 100) : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg p-4 sm:p-6 shadow-sm\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-3 sm:space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold text-black mb-1 sm:mb-2 text-sm sm:text-base\",\n          children: \"Overall Progress:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 text-xs sm:text-sm\",\n          children: [totalScores, \"/\", totalResults, \" results evaluated (\", totalResults > 0 ? Math.round(totalScores / totalResults * 100) : 0, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold text-black mb-2 sm:mb-3 text-sm sm:text-base\",\n          children: \"Score Distribution:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-2 sm:gap-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-green-600 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Good: \", goodPercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-orange-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Average: \", averagePercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-red-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\",\n            children: [\"Bad: \", badPercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(ScoreSummary, \"IQxR8jsVAvWLMrghq86yjMfDluM=\");\n_c = ScoreSummary;\nexport default ScoreSummary;\nvar _c;\n$RefreshReg$(_c, \"ScoreSummary\");","map":{"version":3,"names":["React","useState","useEffect","getFontScores","jsxDEV","_jsxDEV","ScoreSummary","scores","totalResults","currentPrompt","refreshTrigger","_s","allScores","setAllScores","loadExistingFeedback","existingScores","error","console","length","currentPromptScores","filter","score","promptName","existingMd5s","Set","map","md5","newScoresOnly","has","font","combinedScores","goodScores","s","averageScores","badScores","totalScores","goodPercentage","Math","round","averagePercentage","badPercentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/components/ScoreSummary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getFontScores } from '../services/api';\n\nconst ScoreSummary = ({ scores, totalResults = 0, currentPrompt = '', refreshTrigger = 0 }) => {\n    const [allScores, setAllScores] = useState([]);\n\n    // Load existing feedback on mount and when scores change\n    useEffect(() => {\n        const loadExistingFeedback = async () => {\n            try {\n                const existingScores = await getFontScores();\n                setAllScores(existingScores);\n            } catch (error) {\n                console.error('Error loading existing feedback:', error);\n            }\n        };\n\n        loadExistingFeedback();\n    }, [currentPrompt, scores.length, refreshTrigger]); // Re-load when prompt changes, new scores are added, or refresh is triggered\n\n    // Filter existing scores for current prompt only\n    const currentPromptScores = currentPrompt ? allScores.filter(score => score.promptName === currentPrompt) : [];\n\n    // Get unique scores by md5 to avoid double counting\n    const existingMd5s = new Set(currentPromptScores.map(score => score.md5));\n    const newScoresOnly = scores.filter(score => !existingMd5s.has(score.font.md5));\n\n    // Combine existing scores with new scores (avoiding duplicates)\n    const combinedScores = [...currentPromptScores, ...newScoresOnly];\n\n    const goodScores = combinedScores.filter(s => s.score === 'Good Match').length;\n    const averageScores = combinedScores.filter(s => s.score === 'Average Match').length;\n    const badScores = combinedScores.filter(s => s.score === 'Bad Match').length;\n    const totalScores = combinedScores.length;\n\n    const goodPercentage = totalScores > 0 ? Math.round((goodScores / totalScores) * 100) : 0;\n    const averagePercentage = totalScores > 0 ? Math.round((averageScores / totalScores) * 100) : 0;\n    const badPercentage = totalScores > 0 ? Math.round((badScores / totalScores) * 100) : 0;\n\n    return (\n        <div className=\"bg-white rounded-lg p-4 sm:p-6 shadow-sm\">\n            <div className=\"space-y-3 sm:space-y-4\">\n                {/* Overall Progress */}\n                <div>\n                    <h3 className=\"font-bold text-black mb-1 sm:mb-2 text-sm sm:text-base\">Overall Progress:</h3>\n                    <p className=\"text-gray-600 text-xs sm:text-sm\">{totalScores}/{totalResults} results evaluated ({totalResults > 0 ? Math.round((totalScores / totalResults) * 100) : 0}%)</p>\n                </div>\n\n                {/* Score Distribution */}\n                <div>\n                    <h3 className=\"font-bold text-black mb-2 sm:mb-3 text-sm sm:text-base\">Score Distribution:</h3>\n                    <div className=\"flex flex-wrap gap-2 sm:gap-3\">\n                        <span className=\"bg-green-600 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Good: {goodPercentage}%\n                        </span>\n                        <span className=\"bg-orange-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Average: {averagePercentage}%\n                        </span>\n                        <span className=\"bg-red-500 text-white px-2 sm:px-3 py-1 rounded-full text-xs sm:text-sm font-medium\">\n                            Bad: {badPercentage}%\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ScoreSummary; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}