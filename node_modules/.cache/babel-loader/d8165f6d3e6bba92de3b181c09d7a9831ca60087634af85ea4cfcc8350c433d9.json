{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://fontgpt-backend.monotype-pp.com';\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n      query: query,\n      intermediate_query_enabled: true,\n      prompt: prompt,\n      with_conversion_ranking: \"true\",\n      faiss_optimized: true\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // Handle streaming response\n      responseType: 'stream',\n      onDownloadProgress: progressEvent => {\n        // Handle streaming data if needed\n        console.log('Streaming progress:', progressEvent);\n      }\n    });\n\n    // For streaming API, we need to handle the response differently\n    // The response should contain the complete data once status is \"complete\"\n    const data = response.data;\n\n    // Check if the response is already complete (non-streaming response)\n    if (data.status === 'complete') {\n      return data;\n    }\n\n    // If it's a streaming response, we need to wait for completion\n    // This is a simplified approach - in a real streaming scenario,\n    // you might need to handle Server-Sent Events (SSE) or WebSocket\n    return new Promise((resolve, reject) => {\n      // For now, we'll assume the response is complete\n      // In a real implementation, you'd need to handle the actual streaming\n      if (data.status === 'complete') {\n        resolve(data);\n      } else {\n        // If not complete, wait a bit and check again\n        setTimeout(() => {\n          resolve(data);\n        }, 1000);\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching font recommendations:', error);\n    throw error;\n  }\n};\n\n// Alternative implementation for true streaming (if the API supports SSE)\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query,\n        intermediate_query_enabled: true,\n        prompt: prompt,\n        with_conversion_ranking: \"true\",\n        faiss_optimized: true\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n    return new Promise((resolve, reject) => {\n      const processStream = async () => {\n        try {\n          while (true) {\n            const {\n              done,\n              value\n            } = await reader.read();\n            if (done) {\n              break;\n            }\n            buffer += decoder.decode(value, {\n              stream: true\n            });\n\n            // Process complete JSON objects from the stream\n            const lines = buffer.split('\\n');\n            buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n            for (const line of lines) {\n              if (line.trim()) {\n                try {\n                  const data = JSON.parse(line);\n\n                  // Call progress callback if provided\n                  if (onProgress) {\n                    onProgress(data);\n                  }\n\n                  // Check if status is complete\n                  if (data.status === 'complete') {\n                    resolve(data);\n                    return;\n                  }\n                } catch (parseError) {\n                  console.warn('Failed to parse JSON from stream:', line);\n                }\n              }\n            }\n          }\n\n          // If we reach here, try to parse the final buffer\n          if (buffer.trim()) {\n            try {\n              const finalData = JSON.parse(buffer);\n              resolve(finalData);\n            } catch (parseError) {\n              reject(new Error('Failed to parse final response'));\n            }\n          } else {\n            reject(new Error('No complete response received'));\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      processStream();\n    });\n  } catch (error) {\n    console.error('Error fetching font recommendations stream:', error);\n    throw error;\n  }\n};\n\n// Mock function for storing scores in database\nexport const saveFontScore = async (prompt, fontData, score) => {\n  try {\n    // This would be replaced with actual database call\n    const scoreData = {\n      prompt: prompt,\n      font_family: fontData.family_name,\n      font_style: fontData.style_name,\n      font_md5: fontData.md5,\n      foundry: fontData.foundry_name,\n      score: score,\n      timestamp: new Date().toISOString(),\n      font_data: fontData\n    };\n    console.log('Saving font score:', scoreData);\n\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      success: true,\n      data: scoreData\n    };\n  } catch (error) {\n    console.error('Error saving font score:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchFontRecommendations","query","prompt","response","post","intermediate_query_enabled","with_conversion_ranking","faiss_optimized","headers","responseType","onDownloadProgress","progressEvent","console","log","data","status","Promise","resolve","reject","setTimeout","error","fetchFontRecommendationsStream","onProgress","fetch","method","body","JSON","stringify","ok","Error","reader","getReader","decoder","TextDecoder","buffer","processStream","done","value","read","decode","stream","lines","split","pop","line","trim","parse","parseError","warn","finalData","saveFontScore","fontData","score","scoreData","font_family","family_name","font_style","style_name","font_md5","md5","foundry","foundry_name","timestamp","Date","toISOString","font_data","success"],"sources":["/Users/tuliv/Documents/prompt_manual_eval/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://fontgpt-backend.monotype-pp.com';\n\nexport const fetchFontRecommendations = async (query, prompt = \"\") => {\n    try {\n        const response = await axios.post(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n            query: query,\n            intermediate_query_enabled: true,\n            prompt: prompt,\n            with_conversion_ranking: \"true\",\n            faiss_optimized: true\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            // Handle streaming response\n            responseType: 'stream',\n            onDownloadProgress: (progressEvent) => {\n                // Handle streaming data if needed\n                console.log('Streaming progress:', progressEvent);\n            }\n        });\n\n        // For streaming API, we need to handle the response differently\n        // The response should contain the complete data once status is \"complete\"\n        const data = response.data;\n\n        // Check if the response is already complete (non-streaming response)\n        if (data.status === 'complete') {\n            return data;\n        }\n\n        // If it's a streaming response, we need to wait for completion\n        // This is a simplified approach - in a real streaming scenario,\n        // you might need to handle Server-Sent Events (SSE) or WebSocket\n        return new Promise((resolve, reject) => {\n            // For now, we'll assume the response is complete\n            // In a real implementation, you'd need to handle the actual streaming\n            if (data.status === 'complete') {\n                resolve(data);\n            } else {\n                // If not complete, wait a bit and check again\n                setTimeout(() => {\n                    resolve(data);\n                }, 1000);\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching font recommendations:', error);\n        throw error;\n    }\n};\n\n// Alternative implementation for true streaming (if the API supports SSE)\nexport const fetchFontRecommendationsStream = async (query, prompt = \"\", onProgress) => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/fontrecommendations/typesense/stream`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                query: query,\n                intermediate_query_enabled: true,\n                prompt: prompt,\n                with_conversion_ranking: \"true\",\n                faiss_optimized: true\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let buffer = '';\n\n        return new Promise((resolve, reject) => {\n            const processStream = async () => {\n                try {\n                    while (true) {\n                        const { done, value } = await reader.read();\n\n                        if (done) {\n                            break;\n                        }\n\n                        buffer += decoder.decode(value, { stream: true });\n\n                        // Process complete JSON objects from the stream\n                        const lines = buffer.split('\\n');\n                        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n                        for (const line of lines) {\n                            if (line.trim()) {\n                                try {\n                                    const data = JSON.parse(line);\n\n                                    // Call progress callback if provided\n                                    if (onProgress) {\n                                        onProgress(data);\n                                    }\n\n                                    // Check if status is complete\n                                    if (data.status === 'complete') {\n                                        resolve(data);\n                                        return;\n                                    }\n                                } catch (parseError) {\n                                    console.warn('Failed to parse JSON from stream:', line);\n                                }\n                            }\n                        }\n                    }\n\n                    // If we reach here, try to parse the final buffer\n                    if (buffer.trim()) {\n                        try {\n                            const finalData = JSON.parse(buffer);\n                            resolve(finalData);\n                        } catch (parseError) {\n                            reject(new Error('Failed to parse final response'));\n                        }\n                    } else {\n                        reject(new Error('No complete response received'));\n                    }\n                } catch (error) {\n                    reject(error);\n                }\n            };\n\n            processStream();\n        });\n\n    } catch (error) {\n        console.error('Error fetching font recommendations stream:', error);\n        throw error;\n    }\n};\n\n// Mock function for storing scores in database\nexport const saveFontScore = async (prompt, fontData, score) => {\n    try {\n        // This would be replaced with actual database call\n        const scoreData = {\n            prompt: prompt,\n            font_family: fontData.family_name,\n            font_style: fontData.style_name,\n            font_md5: fontData.md5,\n            foundry: fontData.foundry_name,\n            score: score,\n            timestamp: new Date().toISOString(),\n            font_data: fontData\n        };\n\n        console.log('Saving font score:', scoreData);\n\n        // Simulate API call delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        return { success: true, data: scoreData };\n    } catch (error) {\n        console.error('Error saving font score:', error);\n        throw error;\n    }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}